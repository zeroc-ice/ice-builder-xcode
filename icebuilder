#!/usr/bin/env bash
# **********************************************************************
#
# Copyright (c) 2008-2017 ZeroC, Inc. All rights reserved.
#
# **********************************************************************
set -eo pipefail

readonly ICE_BUILDER_XCODE_VERSION=3.1.0

logDebug()
{
    [ -z "$DEBUG" ] || echo "$*"
}

logError()
{
    echo "$*" >&2
}

calledFromXcode()
{
    if [[ -z $XCODE_PRODUCT_BUILD_VERSION || -z $DERIVED_FILE_DIR || -z $INPUT_FILE_PATH ]]; then
        return 1
    fi
    return 0
}

# Run slice sliceCompiler. We always include Ice slice file directory as well as the INPUT_FILE_DIR.
compileSliceFile()
{
    logDebug "Compiling slice file: $INPUT_FILE_NAME"
    set -x # print the executed slice compiler command
    $sliceCompiler -I"$INPUT_FILE_DIR" \
                   -I"$sliceDir" \
                   --output-dir "$outputDir" \
                   "${sliceCompilerArguments[@]}" \
                   "$INPUT_FILE_PATH"
}

# Output directory is detected by comparing the SCRIPT_OUTPUT_FILE_{0,1} variables.
# These are expected to the be the destination of the slice compiler generated header
# and source files. Both files must share the same base directory, as this is how we
# determine the output directory to pass to the slice compiler.
setOutputDir()
{
    if [ "$SCRIPT_OUTPUT_FILE_COUNT" -ne 2 ]; then
        logError "Please specify a header and source output file."
        return 1
    fi

    local -r outputFile0=${SCRIPT_OUTPUT_FILE_0}
    logDebug "Output file 0: $outputFile0"
    local -r outputFile1=${SCRIPT_OUTPUT_FILE_1}
    logDebug "Output file 1: $outputFile1"

    local -r outputFileDir0=$(dirname "$outputFile0")
    local -r outputFileDir1=$(dirname "$outputFile1")

    if [ "$outputFileDir0" != "$outputFileDir1" ]; then
        logError "Output files must be in the same directory."
        return 1
    fi

    outputDir="$outputFileDir0"
}

main()
{
    if ! calledFromXcode; then
        logError "Ice Builder for Xcode must be executed from an Xcode environment."
        exit 0
    fi

    if ! setOutputDir; then
        exit 1
    fi

    # Always check user specified Ice home. Fail if the specified
    # directory does not exist or is not a valid Ice installation
    if [ -n "$iceHome" ]; then
        if ! setIceHomeDir "$iceHome"; then
            logError "${iceHome} is not a valid Ice distribution."
            exit 1
        fi
    else
        # Try the following in order:
        # 1. Search $ADDITIONAL_SDK_DIRS for a IceTouch-like SDK layout
        # 2. Search for an Ice installation in `/usr/local`
        if setIceSDKDir; then
            logDebug "Ice SDK (absolute path): $iceSDKDir"
        elif setIceHomeDir '/usr/local'; then
            logDebug "Ice Home: $iceHomeDir"
        else
            logError "Unable to find valid Ice, Ice SDK, or Ice Touch distribution."
            exit 1
        fi

    fi

    readonly iceVersion=$("$sliceCompiler" -v 2>&1)
    logDebug "Ice version: $iceVersion"

    compileSliceFile
}

# Check if given directory is a valid Ice installation and set required variables
setIceHomeDir()
{
    iceHomeDir="$1"

    # source build
    sliceDir="${iceHomeDir}/slice"
    sliceCompiler="${iceHomeDir}/cpp/bin/slice2${language}"
    [ -d "$sliceDir" ] && [ -x "$sliceCompiler" ] && return 0

    # "usr" style install
    sliceDir="${iceHomeDir}/share/ice/slice"
    sliceCompiler="${iceHomeDir}/bin/slice2${language}"
    [ -d "$sliceDir" ] && [ -x "$sliceCompiler" ] && return 0

    # "opt" style install
    sliceDir="${iceHomeDir}/slice"
    sliceCompiler="${iceHomeDir}/bin/slice2${language}"
    [ -d "$sliceDir" ] && [ -x "$sliceCompiler" ] && return 0

    # Unable to find Ice home; unset variables
    iceHomeDir=
    sliceDir=
    sliceCompiler=
    return 1
}

# Find SDK from ADDITIONAL_SDK_DIRS and set required variables
setIceSDKDir()
{
    for sdk in $ADDITIONAL_SDK_DIRS
    do
        local -r sdkDir=$(dirname "$sdk")

        # IceTouch == IceTouch 1.3 and 3.6
        # IceSDK == Ice 3.7 beta
        if [[ "$sdk" =~ "IceTouch" ]] || [[ "$sdk" =~ "IceSDK" ]]; then
            iceSDKDir="$sdk"
            sliceDir="${sdkDir}/slice"                          # Slice file directory included the SDK
            sliceCompiler="${sdkDir}/bin/slice2${language}"     # Either 'slice2cpp' or 'slice2objc'

            # Check that the slice directory exists, and that the slice compiler exists and is executable
            [ -d "$sliceDir" ] && [ -x "$sliceCompiler" ] && return 0
        fi
    done

    # Unable to find Ice SDK; unset variables
    iceSDKDir=
    sliceDir=
    sliceCompiler=
    return 1
}

printUsage()
{
    cat <<EOF
Usage: $(basename "$0") [options] [-- <slice compiler flags>]
Options:
-h, --help      Show this message.
-v, --version   Display Ice Builder for Xcode version.
--cpp           Use slice2cpp. Default is slice2objc.
--ice-home      Location of Ice install.
-- ARGS         Pass agruments directly to the slice compiler.
EOF
}

#
# Process arguments and run slice compiler
#
logDebug "Ice Builder for Xcode version: $ICE_BUILDER_XCODE_VERSION"

sliceCompilerArguments=()
language=objc

while [[ $# -gt 0 ]]; do
    opt="$1"
    case $opt in
        --cpp)
            language=cpp
            ;;
        -h|--help)
            printUsage
            exit
            ;;
        --ice-home)
            shift
            iceHome="$1"
            ;;
        -v|--version)
            echo "$ICE_BUILDER_XCODE_VERSION"
            exit
            ;;
        --)
            shift
            sliceCompilerArguments=("$@")
            break
            ;;
        *)
            logError "Unknown option: '$opt'"
            exit 1
        ;;
    esac
    shift
done

main
